plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'


project.ext.envConfigFiles = [
        debug: ".env",
        release: ".env",
        djmote: ".env.djmote",
        rapruler: ".env.rapruler",
        pickupmvp: ".env.pickupmvp",
        fantasyjams: ".env.fantasyjams",
        trackauthoritymusic: ".env.tam",
]


MYENVS = [:]
if (!project.hasProperty('env')) {
    project.env = [:] // Initialize env if it's not already defined
}

def loadEnvFile(flavor) {
    // Determine the env file based on the flavor
    def envFileName = project.ext.envConfigFiles[flavor] ?: ".env" // Fallback to default .env
    def envFile = file("${rootDir}/../${envFileName}") // Adjusting the path to point to the Flutter root

    if (envFile.exists()) {
        println "Loading environment variables from ${envFile.absolutePath}"
        envFile.eachLine { line ->
            if (!line.startsWith("#")) { // Skip comments
                def (key, value) = line.split("=", 2)
                if (key && value) {
                    println "setting ENV VAR ${line}"
                    MYENVS[key.trim()] = value.trim()
                } else {
                    println "skip invalid line ${line}"
                }
            } else {
                println "skip comment ${line}"
            }
        }
    } else {
        println "${envFileName} file not found at ${envFile.absolutePath}"
    }
}

loadEnvFile("djmote")

android {
    namespace "com.djmote.app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion
    namespace project.env.get("APP_PACKAGE_ID")

    /*
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    */

    defaultConfig {
        multiDexEnabled true
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId project.env.get("APP_PACKAGE_ID")
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion localProperties.getProperty('flutter.minSdkVersion').toInteger()
        targetSdkVersion flutter.targetSdkVersion
        versionCode project.env.get("VERSION_CODE").toInteger()
        versionName flutterVersionName

        resValue "string", "build_config_package", project.env.get("APP_PACKAGE_ID")
        resValue "string", "app_package_id", project.env.get("APP_PACKAGE_ID")
        resValue "string", "app_name", project.env.get("APP_NAME")
        resValue "string", "client_host", project.env.get("CLIENT_HOST")
        resValue "string", "app_id", project.env.get("APP_ID")
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "default"

    productFlavors {
        djmote {
            dimension "default"
            applicationId 'com.djmote.app'
        }
        rapruler {
            dimension "default"
            applicationId 'com.therapruler'
        }
        pickupmvp {
            dimension "default"
            applicationId 'com.pickupmvp'
        }
        trackauthoritymusic {
            dimension "default"
            applicationId 'com.trackauthoritymusic'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'cupertino_icons:0.1.3'
    implementation 'com.adeo:app_links:1.0.0'
    implementation 'com.google.firebase:firebase-core:21.0.1'
    implementation 'com.google.firebase:firebase-messaging:23.1.0'
    implementation 'com.dexterous:firebase-local-notifications:2.0.0'
    implementation 'com.pichillilorenzo.flutter_inappwebview:flutter_inappwebview:5.3.2'
    implementation 'com.baseflow.permissionhandler:permission_handler:10.2.0'
    implementation 'com.get_it:get_it:7.2.0'
    implementation 'com.github.cyangyang520:FlutterConfig:1.0.2'
}

flutter {
    source '../..'
}